#ifndef SOLVER_H
#define SOLVER_H

#include "belief_update/belief_update.h"
#include "globals.h"
#include "history.h"
#include "lower_bound/lower_bound.h"
#include "model.h"
#include "qnode.h"
#include "random_streams.h"
#include "upper_bound/upper_bound.h"
#include "vnode.h"

// This class implements the core of the algorithm.
template<typename T>
class Solver {
 public:
  Solver(const Model<T>& model,
         const vector<pair<T, double>>& initial_belief,
         const ILowerBound<T>& lb,
         const IUpperBound<T>& ub,
         BeliefUpdate<T>& bu,
         const RandomStreams& random_streams)
      : model_(model),
        initial_belief_(initial_belief),
        lb_(lb),
        ub_(ub),
        bu_(bu),
        streams_(random_streams),
        history_(History())
  {}

  void Init();

  // Builds a search tree using at most @maxTime CPU time. This time does not
  // include the time for pruning. Returns the best action to take.
  int Search(double max_time, int& n_trials);

  // True iff all particles are in the terminal state
  bool Finished() const;

  // Updates the agent's current belief and initializes a new tree rooted at
  // the new belief.
  void UpdateBelief(int act, uint64_t obs);

  // Resets the solver to its initial state (as if it were just constructed and
  // Init() was called). Useful when running experiments so that the solver
  // need not be constructed everytime.
  void Reset();

  History GetHistory() { return history_; }

  const RandomStreams& random_streams() const { return streams_; }

 private:
  // Performs a single trial and backs up the nodes along the path. Params:
  // @debug: Whether to print debugging output.
  // @node: current VNode.
  // Return value: number of new search tree nodes added during this trial
  int Trial(unique_ptr<VNode<T>>& node, bool debug=false);
        
  // Expands a fringe belief node one level
  void ExpandOneStep(unique_ptr<VNode<T>>& node, bool debug=false);

  // Destroys the current search tree and creates a new one with the given
  // particles at its root.
  void NewRoot(vector<Particle<T>*> particles);

  const Model<T>& model_;
  vector<pair<T, double>> initial_belief_;
  const ILowerBound<T>& lb_;
  const IUpperBound<T>& ub_;
  BeliefUpdate<T>& bu_;
  const RandomStreams& streams_;
  History history_; // Updated after each belief-update, and during search
  unique_ptr<VNode<T>> root_; // Root of the search tree
  int root_default_action_; // Action for the default lower bound at the root
};

template<typename T>
void Solver<T>::NewRoot(vector<Particle<T>*> particles) {
  pair<double, int> lb = lb_.LowerBound(history_, particles, 0, model_);
  root_default_action_ = lb.second;
  double ub = ub_.UpperBound(history_, particles, 0, model_);
  root_ = unique_ptr<VNode<T>>(
      new VNode<T>(std::move(particles), lb.first, ub, 0, 1, false));
}

template<typename T>
void Solver<T>::Init() {
  // Construct pool
  vector<Particle<T>*> pool;
  for (auto& it: initial_belief_) {
    Particle<T>* particle = model_.Allocate();
    particle->state = it.first;
    particle->id = 0;
    particle->wt = it.second;
    pool.push_back(particle);
  }
  random_shuffle(pool.begin(), pool.end());
  auto particles = bu_.Sample(pool, Globals::config.n_particles);
  NewRoot(particles);
  for (auto p: pool)
    model_.Free(p);
}

template<typename T>
void Solver<T>::Reset() {
  bu_.Reset();
  history_.Truncate(0);
  Init();
}

template<typename T>
int Solver<T>::Search(double max_time, int& n_trials) {
  cerr << "Before: lBound = " << root_->lbound() << ", "
       << "uBound = " << root_->ubound() << endl;

  clock_t begin = clock();
  n_trials = 0;
  while ((double)(clock() - begin) / CLOCKS_PER_SEC < max_time
        && Globals::ExcessUncertainty(root_->lbound(), root_->ubound(), root_->lbound(),
                             root_->ubound(), 0) > 1e-6) {
    Trial(root_);
    n_trials++;
  }

  cerr << "After: lbound = " << root_->lbound() << " ubound = "
       << root_->ubound() << "\nTree nodes / All nodes = "
       << root_->n_tree_nodes() << "/" << VNode<T>::node_count() << " = "
       << (double)root_->n_tree_nodes() / VNode<T>::node_count() 
       << "\nTrials = " << n_trials << endl;

  if (Globals::config.pruning_constant) {
    // Number of non-child belief nodes pruned
    int total_pruned = 0;
    root_->Prune(total_pruned);
    cerr << "Pruned = " << total_pruned << endl;
    int act = root_->pruned_action(); 
    return act == -1 ? root_default_action_ : act;
  }
  else if (!(root_->in_tree()))
    return root_default_action_;
  else
    return root_->LowerBoundAction();
}

template<typename T>
void Solver<T>::ExpandOneStep(unique_ptr<VNode<T>>& node, bool debug) {
  auto& particles = node->particles();
  vector<QNode<T>>& qnodes = node->qnodes();
  qnodes.reserve(model_.NumActions());
  double q_star = -Globals::INF;

  for (int a = 0; a < model_.NumActions(); a++) {
    if (debug)
      cerr << "a = " << a << endl; 

    double first_step_reward = 0;
    // Map from observation to set of particles that produced that observation
    MAP<uint64_t, vector<Particle<T>*>> obs_to_particles;

    for (Particle<T>* p: particles) {
      Particle<T>* new_particle = model_.Copy(p);
      uint64_t obs; 
      double reward;
      model_.Step(new_particle->state, streams_.Entry(p->id, node->depth()), 
                  a, reward, obs);
      if (model_.IsTerminal(new_particle->state))
        assert(obs == model_.TerminalObs());
      obs_to_particles[obs].push_back(new_particle);
      first_step_reward += reward * p->wt;
    }
    first_step_reward /= node->weight();

    if (debug) 
      cerr << "node weight = " << node->weight() << endl;

    qnodes.push_back(QNode<T>(obs_to_particles, node->depth(), a, 
                       first_step_reward, history_, model_, lb_, ub_, false));
    auto& qnode = qnodes.back();
    double remaining_reward = qnode.UpperBound();
    if (first_step_reward + Globals::config.discount * remaining_reward >
        q_star + Globals::TINY) {
      q_star = first_step_reward + Globals::config.discount * remaining_reward;
      node->set_best_ub_action(a);
    }

    if (debug) { 
      cerr << "first_step_reward = " << first_step_reward << endl;
      cerr << "remaining_reward = " << remaining_reward << endl;
    }
  }

  assert(node->best_ub_action() != -1);
}

template<typename T>
int Solver<T>::Trial(unique_ptr<VNode<T>>& node, bool debug) {
  if (node->depth() >= Globals::config.search_depth || 
      model_.IsTerminal(node->particles()[0]->state))
    return 0;

  if (debug) 
    cerr << "TRIAL\n" << "depth = " << node->depth() << "\n";

  if (node->qnodes().empty())
    ExpandOneStep(node, debug);

  int a_star = node->best_ub_action();
  if (debug)
    cerr << "a_star = " << a_star << endl;

  vector<QNode<T>>& qnodes = node->qnodes();
  int num_nodes_added = 0;

  pair<uint64_t, double> best_WEUO = qnodes[a_star].BestWEUO(root_);
  if (best_WEUO.second > 0) {
    if (debug) 
      cerr << "o_star = " << best_WEUO.first << endl;
    history_.Add(a_star, best_WEUO.first);
    num_nodes_added = Trial(qnodes[a_star].Belief(best_WEUO.first), debug);
    history_.RemoveLast();
  }
  node->set_n_tree_nodes(node->n_tree_nodes() + num_nodes_added);

  // Backup
  if (debug) 
    cerr << "Backing up\n";

  double new_lbound = max(node->lbound(), 
      qnodes[a_star].first_step_reward() +
      Globals::config.discount * qnodes[a_star].LowerBound());
  node->set_lbound(new_lbound);

  // As the upper bound of a_star may become smaller than the upper bound of
  // another action, we need to check all actions unlike the lower bound.
  node->set_ubound(-Globals::INF);
  for (int a = 0; a < model_.NumActions(); a++) {
    double ub = qnodes[a].first_step_reward() +
                Globals::config.discount *
                qnodes[a].UpperBound();
    if (ub > node->ubound()) {
      node->set_ubound(ub);
      node->set_best_ub_action(a);
    }
  }

  // Sanity check
  if (node->lbound() > node->ubound() + Globals::TINY) {
    cerr << "depth = " << node->depth() << endl;
    cerr << node->lbound() << " " << node->ubound() << endl;
    assert(false);
  }

  if (!node->in_tree()) {
    node->set_in_tree(true);
    node->set_n_tree_nodes(node->n_tree_nodes() + 1);
    num_nodes_added++;
  }

  return num_nodes_added;
}

template<typename T>
bool Solver<T>::Finished() const {
  for (auto p: root_->particles())
    if (!model_.IsTerminal(p->state))
      return false;
  return true;
}

template<typename T>
void Solver<T>::UpdateBelief(int act, uint64_t obs) {
  vector<Particle<T>*> particles = bu_.Update(root_->particles(), 
      Globals::config.n_particles, act, obs);
  history_.Add(act, obs);
  NewRoot(particles);
}

#endif
